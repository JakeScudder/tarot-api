{"version":3,"sources":["galaxy-fill.svg","galaxy.svg","components/HomePage.js","components/OneCard.js","components/ThreeCard.js","components/FourCard.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","props","toggle","e","preventDefault","setState","showing","state","hideShow","loading","this","id","src","logo","className","alt","onClick","Component","OneCard","formatName","name","split","map","word","toUpperCase","substr","join","randomNumGeneration","randomNum","Math","floor","random","num1","refresh","window","location","reload","card","cardName","cardSummary","image","deck","data","summary","ThreeCard","randomNum1","randomNum2","randomNum3","num2","num3","card1","cardName1","cardSummary1","image1","card2","cardName2","cardSummary2","image2","card3","cardName3","cardSummary3","image3","console","log","FourCard","randomNum4","num4","card4","cardName4","cardSummary4","image4","Nav","to","tarotData","require","App","exact","path","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2596d594.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/galaxy-fill.395dc514.svg\";","module.exports = __webpack_public_path__ + \"static/media/galaxy.5346ee6a.svg\";","import React, { Component } from \"react\";\nimport logo from \"../galaxy-fill.svg\";\n\nclass HomePage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      showing: false,\n      hideShow: \"Show\",\n    };\n  }\n\n  //Toggle handles showing and hiding help. Also changes the variable text.\n  toggle = (e) => {\n    e.preventDefault();\n    this.setState({\n      showing: !this.state.showing,\n    });\n    if (this.state.hideShow === \"Hide\") {\n      this.setState({\n        hideShow: \"Show\",\n      });\n    } else {\n      this.setState({\n        hideShow: \"Hide\",\n      });\n    }\n  };\n\n  render() {\n    //Variable destructuring\n    const { showing, hideShow } = this.state;\n\n    return (\n      <div id=\"homepage-div\">\n        <div id=\"title-help-container\">\n          <h1>What Awaits?</h1>\n        </div>\n        {showing ? (\n          <div>\n            <p>\n              If you are unfamiliar with Tarot Cards, here is a quick\n              introduction:\n            </p>\n            <p>\n              Decide if you want to draw 1, 3, or 4 cards. Some people use two\n              card readings, but the books I have read did not include it.\n            </p>\n            <p>\n              Try to frame a question or situation in your head. When you draw\n              the cards, see how they relate to what you had in mind.\n            </p>\n            <p>\n              Don't take the cards too literally, try to delve into their\n              imagery and how they relate to your feelings or insecurities.\n            </p>\n            <p>\n              If you receive a 'bad' card, review your attachments to the issue.\n              If they are 'good' cards, you know what you are hoping for and\n              perhaps what you should focus on in the future.\n            </p>\n          </div>\n        ) : (\n          <img src={logo} className=\"App-logo-filler\" alt=\"logo\" />\n        )}\n        <div id=\"footer-homepage\">\n          <button id=\"hide-description\" onClick={this.toggle}>\n            {hideShow} Help\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\n\nclass OneCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      showing: false,\n      num1: null,\n    };\n  }\n\n  componentDidMount() {\n    this.randomNumGeneration();\n    this.setState({\n      loading: false,\n    });\n  }\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  toggle = (e) => {\n    e.preventDefault();\n    this.setState({\n      showing: !this.state.showing,\n    });\n  };\n\n  randomNumGeneration = () => {\n    let randomNum = Math.floor(Math.random() * 78);\n    this.setState({\n      num1: randomNum,\n    });\n  };\n\n  refresh = () => {\n    window.location.reload();\n  };\n\n  render() {\n    const { showing } = this.state;\n    let deck = this.props.data;\n    let randomNum = this.state.num1;\n    let card;\n    let cardName;\n    let cardSummary;\n    let image;\n    if (deck && deck[0] && randomNum !== null) {\n      card = deck[randomNum];\n      cardName = this.formatName(card.name);\n      cardSummary = card.summary;\n      image = card.image;\n    }\n\n    if (card !== null) {\n      return (\n        <div id=\"one-card-container\">\n          <div id=\"title-help-container\">\n            <button id=\"refresh\" onClick={this.refresh}>\n              <h3 className=\"refresh-title\">Draw</h3>\n              <h3 className=\"refresh-title\">Again</h3>\n            </button>\n            <h3>You Drew</h3>\n            <button id=\"help-button\" onClick={this.toggle}>\n              ?\n            </button>\n          </div>\n          {showing ? (\n            <div>\n              <h3 className=\"daily-help-title\">Daily Reading</h3>\n              <p>\n                A simple reading, take a moment to think about what might be the\n                focus for your day\n              </p>\n              <p>\n                To emphasize, try not to be to literal. Look at the imagery and\n                search for the metaphors\n              </p>\n              <p>\n                For example, the Death card could be a reminder that there is a\n                situation or relationship you should put behind you.\n              </p>\n            </div>\n          ) : null}\n          <div>\n            <h2 className=\"name-title-one\">{cardName}</h2>\n            <img className=\"card-image\" alt=\"Card\" src={image} />\n            <h4 className=\"summary\">{cardSummary}</h4>\n          </div>\n        </div>\n      );\n    } else {\n      return <h2>Card Data missing :(</h2>;\n    }\n  }\n}\n\nexport default OneCard;\n","import React, { Component } from \"react\";\n\nclass ThreeCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      showing: false,\n      num1: null,\n      num2: null,\n      num3: null,\n    };\n  }\n\n  componentDidMount() {\n    this.randomNumGeneration();\n  }\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return this.state.showing !== nextState.showing;\n  // }\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  toggle = () => {\n    this.setState({\n      showing: !this.state.showing,\n    });\n  };\n\n  refresh = () => {\n    window.location.reload();\n  };\n\n  randomNumGeneration = () => {\n    let randomNum1 = Math.floor(Math.random() * 78);\n    let randomNum2 = Math.floor(Math.random() * 78);\n    if (randomNum2 === randomNum1) {\n      randomNum2 = Math.floor(Math.random() * 78);\n    }\n    let randomNum3 = Math.floor(Math.random() * 78);\n    if (randomNum3 === randomNum1 || randomNum3 === randomNum2) {\n      randomNum3 = Math.floor(Math.random() * 78);\n    }\n\n    this.setState({\n      num1: randomNum1,\n      num2: randomNum2,\n      num3: randomNum3,\n    });\n  };\n\n  render() {\n    const { showing } = this.state;\n    let deck = this.props.data;\n    let card1;\n    let cardName1;\n    let cardSummary1;\n    let image1;\n    //Card 2\n    let card2;\n    let cardName2;\n    let cardSummary2;\n    let image2;\n    //Card 3\n    let card3;\n    let cardName3;\n    let cardSummary3;\n    let image3;\n\n    // // Random Num Generation\n    // let randomNum1 = Math.floor(Math.random() * 78);\n    // let randomNum2 = Math.floor(Math.random() * 78);\n    // if (randomNum2 === randomNum1) {\n    //   randomNum2 = Math.floor(Math.random() * 78);\n    // }\n    // let randomNum3 = Math.floor(Math.random() * 78);\n    // if (randomNum3 === randomNum1 || randomNum3 === randomNum2) {\n    //   randomNum3 = Math.floor(Math.random() * 78);\n    // }\n\n    let randomNum1 = this.state.num1;\n    let randomNum2 = this.state.num2;\n    let randomNum3 = this.state.num3;\n\n    if (deck && deck[0] && randomNum1 !== null) {\n      //Card 1\n      card1 = deck[randomNum1];\n      cardName1 = this.formatName(card1.name);\n      cardSummary1 = card1.summary;\n      console.log(\"card1:\", card1.name);\n      image1 = card1.image;\n      //Card 2\n      card2 = deck[randomNum2];\n      cardName2 = this.formatName(card2.name);\n      cardSummary2 = card2.summary;\n      console.log(\"card2:\", card2.name);\n      image2 = card2.image;\n      //Card 3\n      card3 = deck[randomNum3];\n      cardName3 = this.formatName(card3.name);\n      cardSummary3 = card3.summary;\n      console.log(\"card3:\", card3.name);\n      image3 = card3.image;\n    }\n\n    if (card1 !== null) {\n      return (\n        <div id=\"three-card-container\">\n          <div id=\"title-help-container\">\n            <button id=\"refresh\" onClick={this.refresh}>\n              <h3 className=\"refresh-title\">Draw</h3>\n              <h3 className=\"refresh-title\">Again</h3>\n            </button>\n            <h1 className=\"you-drew\">You Drew</h1>\n            <button id=\"help-button\" onClick={this.toggle}>\n              ?\n            </button>\n          </div>\n          {showing ? (\n            <div>\n              <h2>Past, Present, Future</h2>\n              <p>\n                Past: What factors from the past still affect your question or\n                issue\n              </p>\n              <p>\n                Present: What surrounds this currently: Positive or Negative\n                aspects\n              </p>\n              <p>Future: What to focus on or what should be avoided</p>\n            </div>\n          ) : null}\n          <div className=\"card-container\">\n            <div className=\"cards-displayed\">\n              <img id=\"card-image-first\" alt=\"Card\" src={image1} />\n              <img id=\"card-image-second\" alt=\"Card\" src={image2} />\n              <img id=\"card-image-third\" alt=\"Card\" src={image3} />\n              <h4>\n                {cardName1}, {cardName2}, {cardName3}\n              </h4>\n            </div>\n            <div className=\"threecard-summary\">\n              {/* Card 1 */}\n              <h2 className=\"name-title\">Past: {cardName1}</h2>\n              <img className=\"threecard-image\" alt=\"Card\" src={image1} />\n              <h4 className=\"summary\">{cardSummary1}</h4>\n\n              <br></br>\n              {/* Card 2 */}\n              <h2 className=\"name-title\">Present: {cardName2}</h2>\n              <img className=\"threecard-image\" alt=\"Card\" src={image2} />\n              <h4 className=\"summary\">{cardSummary2}</h4>\n\n              {/* Card 3 */}\n              <h2 className=\"name-title\">Future: {cardName3}</h2>\n              <img className=\"threecard-image\" alt=\"Card\" src={image3} />\n              <h4 className=\"summary\">{cardSummary3}</h4>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return <h1>Card Data Missing :(</h1>;\n    }\n  }\n}\n\nexport default ThreeCard;\n","import React, { Component } from \"react\";\n\nclass FourCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      showing: false,\n      num1: null,\n      num2: null,\n      num3: null,\n      num4: null,\n    };\n  }\n\n  componentDidMount() {\n    this.randomNumGeneration();\n  }\n\n  toggle = () => {\n    this.setState({\n      showing: !this.state.showing,\n    });\n  };\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  randomNumGeneration = () => {\n    let randomNum1 = Math.floor(Math.random() * 78);\n    let randomNum2 = Math.floor(Math.random() * 78);\n    if (randomNum2 === randomNum1) {\n      randomNum2 = Math.floor(Math.random() * 78);\n    }\n    let randomNum3 = Math.floor(Math.random() * 78);\n    if (randomNum3 === randomNum1 || randomNum3 === randomNum2) {\n      randomNum3 = Math.floor(Math.random() * 78);\n    }\n    let randomNum4 = Math.floor(Math.random() * 78);\n    if (\n      randomNum4 === randomNum1 ||\n      randomNum4 === randomNum2 ||\n      randomNum4 === randomNum3\n    ) {\n      randomNum4 = Math.floor(Math.random() * 78);\n    }\n\n    this.setState({\n      num1: randomNum1,\n      num2: randomNum2,\n      num3: randomNum3,\n      num4: randomNum4,\n    });\n  };\n\n  refresh = () => {\n    window.location.reload();\n  };\n\n  render() {\n    const { showing } = this.state;\n\n    let deck = this.props.data;\n    let card1;\n    let cardName1;\n    let cardSummary1;\n    let image1;\n    //Card 2\n    let card2;\n    let cardName2;\n    let cardSummary2;\n    let image2;\n    //Card 3\n    let card3;\n    let cardName3;\n    let cardSummary3;\n    let image3;\n    //Card 4\n    let card4;\n    let cardName4;\n    let cardSummary4;\n    let image4;\n\n    let randomNum1 = this.state.num1;\n    let randomNum2 = this.state.num2;\n    let randomNum3 = this.state.num3;\n    let randomNum4 = this.state.num4;\n\n    if (deck && deck[0] && randomNum1 !== null) {\n      //Card 1\n      card1 = deck[randomNum1];\n      cardName1 = this.formatName(card1.name);\n      cardSummary1 = card1.summary;\n      console.log(\"card1:\", card1.name);\n      image1 = card1.image;\n      //Card 2\n      card2 = deck[randomNum2];\n      cardName2 = this.formatName(card2.name);\n      cardSummary2 = card2.summary;\n      console.log(\"card2:\", card2.name);\n      image2 = card2.image;\n      //Card 3\n      card3 = deck[randomNum3];\n      cardName3 = this.formatName(card3.name);\n      cardSummary3 = card3.summary;\n      console.log(\"card3:\", card3.name);\n      image3 = card3.image;\n      //Card 4\n      card4 = deck[randomNum4];\n      cardName4 = this.formatName(card4.name);\n      cardSummary4 = card4.summary;\n      console.log(\"card4:\", card4.name);\n      image4 = card4.image;\n    }\n\n    if (card1 !== null) {\n      return (\n        <div id=\"four-card-container\">\n          <button id=\"refresh\" onClick={this.refresh}>\n            <h3 className=\"refresh-title\">Draw</h3>\n            <h3 className=\"refresh-title\">Another</h3>\n          </button>\n          <h1 className=\"you-drew\">You Drew</h1>\n          <button id=\"help-button\" onClick={this.toggle}>\n            ?\n          </button>\n          {showing ? (\n            <div>\n              <h2>Over and Under</h2>\n              <p>\n                This four card spread contains one card that represents the\n                overarching theme regarding the question or issue, followed by\n                three underlying factors.\n              </p>\n              <p>\n                Think about what is the main theme of your drawing and what are\n                the smaller things that play into that.\n              </p>\n            </div>\n          ) : null}\n          <div id=\"overarching-card\">\n            <img id=\"card-image-arching\" alt=\"Card\" src={image4} />\n            <h2 id=\"overarching-title\">{cardName4}</h2>\n          </div>\n          <div className=\"cards-displayed\">\n            <img id=\"card-image-first\" alt=\"Card\" src={image1} />\n            <img id=\"card-image-second\" alt=\"Card\" src={image2} />\n            <img id=\"card-image-third\" alt=\"Card\" src={image3} />\n            <h4>\n              {cardName1}, {cardName2}, {cardName3}\n            </h4>\n          </div>\n          <div className=\"threecard-summary\">\n            {/* Card 4 */}\n            <h2 className=\"name-title\">OverArching Card:</h2>\n            <h2 className=\"overarching-title\">{cardName4}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image4} />\n            <h4 className=\"summary\">{cardSummary4}</h4>\n            {/* Card 1 */}\n            <h2 className=\"name-title\">Underlying Factors:</h2>\n            <h2 className=\"underlying-title\">{cardName1}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image1} />\n            <h4 className=\"summary\">{cardSummary1}</h4>\n\n            {/* Card 2 */}\n            <h2 className=\"name-title\">{cardName2}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image2} />\n            <h4 className=\"summary\">{cardSummary2}</h4>\n\n            {/* Card 3 */}\n            <h2 className=\"name-title\">{cardName3}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image3} />\n            <h4 className=\"summary\">{cardSummary3}</h4>\n          </div>\n        </div>\n      );\n    } else {\n      return <h1>Card Data Missing :(</h1>;\n    }\n  }\n}\n\nexport default FourCard;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav className=\"main-nav\">\n        <ul>\n          <li className=\"nav-li\">\n            <NavLink to=\"/one\">One</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/three\">Three</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/four\">Four</NavLink>\n          </li>\n          {/* <li className=\"nav-li\">\n            <NavLink to=\"/celtic\">Celtic Cross</NavLink>\n          </li> */}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\n\n// Components\nimport HomePage from \"./components/HomePage\";\nimport OneCard from \"./components/OneCard\";\nimport ThreeCard from \"./components/ThreeCard\";\nimport FourCard from \"./components/FourCard\";\nimport Nav from \"./components/Nav\";\n\n// import axios from \"axios\";\nimport logo from \"./galaxy.svg\";\nimport \"./App.css\";\n\nconst tarotData = require(\"./tarotData.json\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: tarotData,\n    };\n  }\n\n  componentDidMount() {\n    console.log(this.state.deck);\n  }\n\n  render() {\n    return (\n      <HashRouter>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 id=\"app-name-h1\">\n              The <span className=\"secondary\">Tarot</span>\n            </h1>\n            <h1>How Many Cards?</h1>\n            <Nav />\n          </header>\n          <Switch>\n            <Route\n              exact\n              path=\"/four\"\n              render={(props) => <FourCard {...props} data={this.state.deck} />}\n            />\n            <Route\n              exact\n              path=\"/three\"\n              render={(props) => (\n                <ThreeCard {...props} data={this.state.deck} />\n              )}\n            />\n            <Route\n              exact\n              path=\"/one\"\n              render={(props) => <OneCard {...props} data={this.state.deck} />}\n            />\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}