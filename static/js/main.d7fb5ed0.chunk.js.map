{"version":3,"sources":["galaxy.svg","components/HomePage.js","components/OneCard.js","components/ThreeCard.js","components/FourCard.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","Component","OneCard","formatName","name","split","map","word","toUpperCase","substr","join","card","cardName","cardSummary","image","deck","this","props","data","randomNum","Math","floor","random","summary","console","log","className","alt","src","ThreeCard","card1","cardName1","cardSummary1","image1","card2","cardName2","cardSummary2","image2","card3","cardName3","cardSummary3","image3","randomNum1","randomNum2","randomNum3","id","FourCard","card4","cardName4","cardSummary4","image4","randomNum4","Nav","to","App","fetchCards","axios","get","then","res","setState","catch","error","state","logo","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.d7fb5ed0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/galaxy.5346ee6a.svg\";","import React, { Component } from \"react\";\n\nclass HomePage extends Component {\n  render() {\n    return <h1>What Awaits? </h1>;\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\n\nclass OneCard extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     loading: true,\n  //   };\n  // }\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  render() {\n    let deck = this.props.data;\n    let randomNum = Math.floor(Math.random() * 78);\n    let card;\n    let cardName;\n    let cardSummary;\n    let image;\n    if (deck && deck[0]) {\n      card = deck[randomNum];\n      cardName = this.formatName(card.name);\n      cardSummary = card.summary;\n      console.log(\"card:\", card.name);\n      image = card.image;\n    }\n\n    if (card !== null) {\n      return (\n        <div>\n          <h3>You Drew</h3>\n          <h2 className=\"name-title-one\">{cardName}</h2>\n          <img className=\"card-image\" alt=\"Card\" src={image} />\n          <h4 className=\"summary\">{cardSummary}</h4>\n        </div>\n      );\n    } else {\n      return <h1>Card Data Missing :(</h1>;\n    }\n  }\n}\n\nexport default OneCard;\n","import React, { Component } from \"react\";\n\nclass ThreeCard extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     loading: true,\n  //   };\n  // }\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  render() {\n    let deck = this.props.data;\n    let card1;\n    let cardName1;\n    let cardSummary1;\n    let image1;\n    //Card 2\n    let card2;\n    let cardName2;\n    let cardSummary2;\n    let image2;\n    //Card 3\n    let card3;\n    let cardName3;\n    let cardSummary3;\n    let image3;\n\n    let randomNum1 = Math.floor(Math.random() * 78);\n    let randomNum2 = Math.floor(Math.random() * 78);\n    let randomNum3 = Math.floor(Math.random() * 78);\n    if (\n      randomNum1 === randomNum2 ||\n      randomNum1 === randomNum3 ||\n      randomNum2 === randomNum3\n    ) {\n      randomNum2 = Math.floor(Math.random() * 78);\n      randomNum3 = Math.floor(Math.random() * 78);\n    }\n\n    if (deck && deck[0]) {\n      //Card 1\n      card1 = deck[randomNum1];\n      cardName1 = this.formatName(card1.name);\n      cardSummary1 = card1.summary;\n      console.log(\"card1:\", card1.name);\n      image1 = card1.image;\n      //Card 2\n      card2 = deck[randomNum2];\n      cardName2 = this.formatName(card2.name);\n      cardSummary2 = card2.summary;\n      console.log(\"card2:\", card2.name);\n      image2 = card2.image;\n      //Card 3\n      card3 = deck[randomNum3];\n      cardName3 = this.formatName(card3.name);\n      cardSummary3 = card3.summary;\n      console.log(\"card3:\", card3.name);\n      image3 = card3.image;\n    }\n\n    if (card1 !== null) {\n      return (\n        <div>\n          <h1>You Drew</h1>\n          <div className=\"cards-displayed\">\n            <img id=\"card-image-first\" alt=\"Card\" src={image1} />\n            <img id=\"card-image-second\" alt=\"Card\" src={image2} />\n            <img id=\"card-image-third\" alt=\"Card\" src={image3} />\n            <h4>\n              {cardName1}, {cardName2}, {cardName3}\n            </h4>\n          </div>\n          <div className=\"threecard-summary\">\n            {/* Card 1 */}\n            <h2 className=\"name-title\">{cardName1}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image1} />\n            <h4 className=\"summary\">{cardSummary1}</h4>\n\n            <br></br>\n            {/* Card 2 */}\n            <h2 className=\"name-title\">{cardName2}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image2} />\n            <h4 className=\"summary\">{cardSummary2}</h4>\n\n            {/* Card 3 */}\n            <h2 className=\"name-title\">{cardName3}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image3} />\n            <h4 className=\"summary\">{cardSummary3}</h4>\n          </div>\n        </div>\n      );\n    } else {\n      return <h1>Card Data Missing :(</h1>;\n    }\n  }\n}\n\nexport default ThreeCard;\n","import React, { Component } from \"react\";\n\nclass FourCard extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     loading: true,\n  //   };\n  // }\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  render() {\n    let deck = this.props.data;\n    let card1;\n    let cardName1;\n    let cardSummary1;\n    let image1;\n    //Card 2\n    let card2;\n    let cardName2;\n    let cardSummary2;\n    let image2;\n    //Card 3\n    let card3;\n    let cardName3;\n    let cardSummary3;\n    let image3;\n    //Card 4\n    let card4;\n    let cardName4;\n    let cardSummary4;\n    let image4;\n\n    // Random Number Generation\n    let randomNum1 = Math.floor(Math.random() * 78);\n    let randomNum2 = Math.floor(Math.random() * 78);\n    let randomNum3 = Math.floor(Math.random() * 78);\n    let randomNum4 = Math.floor(Math.random() * 78);\n\n    // Basic check for duplication\n    if (\n      randomNum1 === randomNum2 ||\n      randomNum1 === randomNum3 ||\n      randomNum2 === randomNum3 ||\n      randomNum2 === randomNum4 ||\n      randomNum3 === randomNum4\n    ) {\n      randomNum2 = Math.floor(Math.random() * 78);\n      randomNum3 = Math.floor(Math.random() * 78);\n      randomNum4 = Math.floor(Math.random() * 78);\n    }\n\n    if (deck && deck[0]) {\n      //Card 1\n      card1 = deck[randomNum1];\n      cardName1 = this.formatName(card1.name);\n      cardSummary1 = card1.summary;\n      console.log(\"card1:\", card1.name);\n      image1 = card1.image;\n      //Card 2\n      card2 = deck[randomNum2];\n      cardName2 = this.formatName(card2.name);\n      cardSummary2 = card2.summary;\n      console.log(\"card2:\", card2.name);\n      image2 = card2.image;\n      //Card 3\n      card3 = deck[randomNum3];\n      cardName3 = this.formatName(card3.name);\n      cardSummary3 = card3.summary;\n      console.log(\"card3:\", card3.name);\n      image3 = card3.image;\n      //Card 4\n      card4 = deck[randomNum4];\n      cardName4 = this.formatName(card4.name);\n      cardSummary4 = card4.summary;\n      console.log(\"card4:\", card4.name);\n      image4 = card4.image;\n    }\n\n    if (card1 !== null) {\n      return (\n        <div>\n          <h1>You Drew</h1>\n          <div id=\"overarching-card\">\n            <img id=\"card-image-arching\" alt=\"Card\" src={image4} />\n          </div>\n          <div className=\"cards-displayed\">\n            <img id=\"card-image-first\" alt=\"Card\" src={image1} />\n            <img id=\"card-image-second\" alt=\"Card\" src={image2} />\n            <img id=\"card-image-third\" alt=\"Card\" src={image3} />\n            <h2>{cardName4}</h2>\n            <h4>\n              {cardName1}, {cardName2}, {cardName3}\n            </h4>\n          </div>\n          <div className=\"threecard-summary\">\n            {/* Card 4 */}\n            <h2 className=\"name-title\">OverArching Card:</h2>\n            <h2 className=\"overarching-title\">{cardName4}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image4} />\n            <h4 className=\"summary\">{cardSummary4}</h4>\n            {/* Card 1 */}\n            <h2 className=\"name-title\">Underlying Factors:</h2>\n            <h2 className=\"underlying-title\">{cardName1}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image1} />\n            <h4 className=\"summary\">{cardSummary1}</h4>\n\n            {/* Card 2 */}\n            <h2 className=\"name-title\">{cardName2}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image2} />\n            <h4 className=\"summary\">{cardSummary2}</h4>\n\n            {/* Card 3 */}\n            <h2 className=\"name-title\">{cardName3}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image3} />\n            <h4 className=\"summary\">{cardSummary3}</h4>\n          </div>\n        </div>\n      );\n    } else {\n      return <h1>Card Data Missing :(</h1>;\n    }\n  }\n}\n\nexport default FourCard;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav className=\"main-nav\">\n        <ul>\n          <li className=\"nav-li\">\n            <NavLink to=\"/one\">One</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/three\">Three</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/four\">Four</NavLink>\n          </li>\n          {/* <li className=\"nav-li\">\n            <NavLink to=\"/celtic\">Celtic Cross</NavLink>\n          </li> */}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n// Components\nimport HomePage from \"./components/HomePage\";\nimport OneCard from \"./components/OneCard\";\nimport ThreeCard from \"./components/ThreeCard\";\nimport FourCard from \"./components/FourCard\";\nimport Nav from \"./components/Nav\";\n\nimport axios from \"axios\";\nimport logo from \"./galaxy.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: null,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCards();\n  }\n\n  fetchCards = () => {\n    axios\n      .get(\n        \"https://cors-anywhere.herokuapp.com/https://tarot.howlcode.com/api/v1/cards\"\n      )\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          deck: res.data,\n        });\n      })\n      .catch((error) => {\n        console.log(\"Error fetching the cards:\", error);\n      });\n  };\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>\n              Draw Your <span className=\"secondary\">Hand</span>\n            </h1>\n            <Nav />\n          </header>\n          <Switch>\n            <Route\n              exact\n              path=\"/four\"\n              render={(props) => <FourCard {...props} data={this.state.deck} />}\n            />\n            <Route\n              exact\n              path=\"/three\"\n              render={(props) => (\n                <ThreeCard {...props} data={this.state.deck} />\n              )}\n            />\n            <Route\n              exact\n              path=\"/one\"\n              render={(props) => <OneCard {...props} data={this.state.deck} />}\n            />\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}