{"version":3,"sources":["galaxy.svg","components/HomePage.js","components/OneCard.js","components/ThreeCard.js","components/FourCard.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","id","Component","OneCard","props","formatName","name","split","map","word","toUpperCase","substr","join","toggle","e","preventDefault","setState","showing","state","randomNumGeneration","randomNum","Math","floor","random","num1","refresh","window","location","reload","loading","this","card","cardName","cardSummary","image","deck","data","summary","console","log","onClick","className","alt","src","ThreeCard","randomNum1","randomNum2","randomNum3","num2","num3","card1","cardName1","cardSummary1","image1","card2","cardName2","cardSummary2","image2","card3","cardName3","cardSummary3","image3","FourCard","randomNum4","num4","card4","cardName4","cardSummary4","image4","Nav","to","App","fetchCards","axios","get","then","res","catch","error","logo","exact","path","render","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f0e218b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/galaxy.5346ee6a.svg\";","import React, { Component } from \"react\";\n\nclass HomePage extends Component {\n  render() {\n    return (\n      <div id=\"homepage-div\">\n        <h1>What Awaits? </h1>\n        <p>\n          If you are unfamiliar with Tarot Cards, here is a quick introduction:\n        </p>\n        <p>\n          Try to frame a question or situation in your head. When you draw the\n          cards, see how they relate to what you had in mind.\n        </p>\n        <p>\n          Don't take the cards too literally, try to delve into their imagery\n          and how they relate to your feelings or insecurities.\n        </p>\n        <p>\n          If you receive a 'bad' card, review your attachments to the issue. If\n          they are 'good' cards, you know what you are hoping for and perhaps\n          what you should focus on in the future.\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\n\nclass OneCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      showing: false,\n      num1: null,\n    };\n  }\n\n  componentDidMount() {\n    this.randomNumGeneration();\n    this.setState({\n      loading: false,\n    });\n  }\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  toggle = (e) => {\n    e.preventDefault();\n    this.setState({\n      showing: !this.state.showing,\n    });\n  };\n\n  randomNumGeneration = () => {\n    let randomNum = Math.floor(Math.random() * 78);\n    this.setState({\n      num1: randomNum,\n    });\n  };\n\n  refresh = () => {\n    window.location.reload();\n  };\n\n  render() {\n    const { showing } = this.state;\n    let deck = this.props.data;\n    let randomNum = this.state.num1;\n    let card;\n    let cardName;\n    let cardSummary;\n    let image;\n    if (deck && deck[0] && randomNum !== null) {\n      card = deck[randomNum];\n      cardName = this.formatName(card.name);\n      cardSummary = card.summary;\n      console.log(\"card:\", card.name);\n      image = card.image;\n    }\n\n    if (card !== null) {\n      return (\n        <div>\n          <div id=\"title-help-container\">\n            <button id=\"refresh\" onClick={this.refresh}>\n              <h3 className=\"refresh-title\">Draw</h3>\n              <h3 className=\"refresh-title\">Another</h3>\n            </button>\n            <h3>You Drew</h3>\n            <button id=\"help-button\" onClick={this.toggle}>\n              ?\n            </button>\n          </div>\n          {showing\n            ? (\n              <div>\n                <h3 className=\"daily-help-title\">Daily Reading</h3>\n                <p>\n                  A simple reading, take a moment to think about what might be\n                  the focus for your day\n                </p>\n                <p>\n                  To reiterate, try not to be to literal. Look at the imagery\n                  and search for the metaphors\n                </p>\n                <p>\n                  For example, the Death card could be a reminder that there is\n                  a situation or relationship you should put behind you.\n                </p>\n              </div>\n            )\n            : null}\n          <div>\n            <h2 className=\"name-title-one\">{cardName}</h2>\n            <img className=\"card-image\" alt=\"Card\" src={image} />\n            <h4 className=\"summary\">{cardSummary}</h4>\n          </div>\n        </div>\n      );\n    } else {\n      return <h2>Card Data missing :(</h2>;\n    }\n  }\n}\n\nexport default OneCard;\n","import React, { Component } from \"react\";\n\nclass ThreeCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      showing: false,\n      num1: null,\n      num2: null,\n      num3: null,\n    };\n  }\n\n  componentDidMount() {\n    this.randomNumGeneration();\n  }\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   return this.state.showing !== nextState.showing;\n  // }\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  toggle = () => {\n    this.setState({\n      showing: !this.state.showing,\n    });\n  };\n\n  refresh = () => {\n    window.location.reload();\n  };\n\n  randomNumGeneration = () => {\n    let randomNum1 = Math.floor(Math.random() * 78);\n    let randomNum2 = Math.floor(Math.random() * 78);\n    if (randomNum2 === randomNum1) {\n      randomNum2 = Math.floor(Math.random() * 78);\n    }\n    let randomNum3 = Math.floor(Math.random() * 78);\n    if (randomNum3 === randomNum1 || randomNum3 === randomNum2) {\n      randomNum3 = Math.floor(Math.random() * 78);\n    }\n\n    this.setState({\n      num1: randomNum1,\n      num2: randomNum2,\n      num3: randomNum3,\n    });\n  };\n\n  render() {\n    const { showing } = this.state;\n    let deck = this.props.data;\n    let card1;\n    let cardName1;\n    let cardSummary1;\n    let image1;\n    //Card 2\n    let card2;\n    let cardName2;\n    let cardSummary2;\n    let image2;\n    //Card 3\n    let card3;\n    let cardName3;\n    let cardSummary3;\n    let image3;\n\n    // // Random Num Generation\n    // let randomNum1 = Math.floor(Math.random() * 78);\n    // let randomNum2 = Math.floor(Math.random() * 78);\n    // if (randomNum2 === randomNum1) {\n    //   randomNum2 = Math.floor(Math.random() * 78);\n    // }\n    // let randomNum3 = Math.floor(Math.random() * 78);\n    // if (randomNum3 === randomNum1 || randomNum3 === randomNum2) {\n    //   randomNum3 = Math.floor(Math.random() * 78);\n    // }\n\n    let randomNum1 = this.state.num1;\n    let randomNum2 = this.state.num2;\n    let randomNum3 = this.state.num3;\n\n    if (deck && deck[0] && randomNum1 !== null) {\n      //Card 1\n      card1 = deck[randomNum1];\n      cardName1 = this.formatName(card1.name);\n      cardSummary1 = card1.summary;\n      console.log(\"card1:\", card1.name);\n      image1 = card1.image;\n      //Card 2\n      card2 = deck[randomNum2];\n      cardName2 = this.formatName(card2.name);\n      cardSummary2 = card2.summary;\n      console.log(\"card2:\", card2.name);\n      image2 = card2.image;\n      //Card 3\n      card3 = deck[randomNum3];\n      cardName3 = this.formatName(card3.name);\n      cardSummary3 = card3.summary;\n      console.log(\"card3:\", card3.name);\n      image3 = card3.image;\n    }\n\n    if (card1 !== null) {\n      return (\n        <div>\n          <div id=\"title-help-container\">\n            <button id=\"refresh\" onClick={this.refresh}>\n              <h3 className=\"refresh-title\">Draw</h3>\n              <h3 className=\"refresh-title\">Another</h3>\n            </button>\n            <h1 className=\"you-drew\">You Drew</h1>\n            <button id=\"help-button\" onClick={this.toggle}>\n              ?\n            </button>\n          </div>\n          {showing\n            ? <div>\n              <h2>Past, Present, Future</h2>\n              <p>\n                Past: What factors from the past still affect your question or\n                issue\n              </p>\n              <p>\n                Present: What surrounds this currently: Positive or Negative\n                aspects\n              </p>\n              <p>Future: What to focus on or what should be avoided</p>\n            </div>\n            : null}\n          <div className=\"card-container\">\n            <div className=\"cards-displayed\">\n              <img id=\"threecard-image-first\" alt=\"Card\" src={image1} />\n              <img id=\"card-image-second\" alt=\"Card\" src={image2} />\n              <img id=\"card-image-third\" alt=\"Card\" src={image3} />\n              <h4>\n                {cardName1}, {cardName2}, {cardName3}\n              </h4>\n            </div>\n            <div className=\"threecard-summary\">\n              {/* Card 1 */}\n              <h2 className=\"name-title\">Past: {cardName1}</h2>\n              <img className=\"threecard-image\" alt=\"Card\" src={image1} />\n              <h4 className=\"summary\">{cardSummary1}</h4>\n\n              <br></br>\n              {/* Card 2 */}\n              <h2 className=\"name-title\">Present: {cardName2}</h2>\n              <img className=\"threecard-image\" alt=\"Card\" src={image2} />\n              <h4 className=\"summary\">{cardSummary2}</h4>\n\n              {/* Card 3 */}\n              <h2 className=\"name-title\">Future: {cardName3}</h2>\n              <img className=\"threecard-image\" alt=\"Card\" src={image3} />\n              <h4 className=\"summary\">{cardSummary3}</h4>\n            </div>\n          </div>\n        </div>\n      );\n    } else {\n      return <h1>Card Data Missing :(</h1>;\n    }\n  }\n}\n\nexport default ThreeCard;\n","import React, { Component } from \"react\";\n\nclass FourCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      showing: false,\n      num1: null,\n      num2: null,\n      num3: null,\n      num4: null,\n    };\n  }\n\n  componentDidMount() {\n    this.randomNumGeneration();\n  }\n\n  toggle = () => {\n    this.setState({\n      showing: !this.state.showing,\n    });\n  };\n\n  formatName = (name) => {\n    return name\n      .split(\"-\")\n      .map((word) => {\n        return word[0].toUpperCase() + word.substr(1);\n      })\n      .join(\" \");\n  };\n\n  randomNumGeneration = () => {\n    let randomNum1 = Math.floor(Math.random() * 78);\n    let randomNum2 = Math.floor(Math.random() * 78);\n    if (randomNum2 === randomNum1) {\n      randomNum2 = Math.floor(Math.random() * 78);\n    }\n    let randomNum3 = Math.floor(Math.random() * 78);\n    if (randomNum3 === randomNum1 || randomNum3 === randomNum2) {\n      randomNum3 = Math.floor(Math.random() * 78);\n    }\n    let randomNum4 = Math.floor(Math.random() * 78);\n    if (\n      randomNum4 === randomNum1 ||\n      randomNum4 === randomNum2 ||\n      randomNum4 === randomNum3\n    ) {\n      randomNum4 = Math.floor(Math.random() * 78);\n    }\n\n    this.setState({\n      num1: randomNum1,\n      num2: randomNum2,\n      num3: randomNum3,\n      num4: randomNum4,\n    });\n  };\n\n  refresh = () => {\n    window.location.reload();\n  };\n\n  render() {\n    const { showing } = this.state;\n\n    let deck = this.props.data;\n    let card1;\n    let cardName1;\n    let cardSummary1;\n    let image1;\n    //Card 2\n    let card2;\n    let cardName2;\n    let cardSummary2;\n    let image2;\n    //Card 3\n    let card3;\n    let cardName3;\n    let cardSummary3;\n    let image3;\n    //Card 4\n    let card4;\n    let cardName4;\n    let cardSummary4;\n    let image4;\n\n    let randomNum1 = this.state.num1;\n    let randomNum2 = this.state.num2;\n    let randomNum3 = this.state.num3;\n    let randomNum4 = this.state.num4;\n\n    if (deck && deck[0] && randomNum1 !== null) {\n      //Card 1\n      card1 = deck[randomNum1];\n      cardName1 = this.formatName(card1.name);\n      cardSummary1 = card1.summary;\n      console.log(\"card1:\", card1.name);\n      image1 = card1.image;\n      //Card 2\n      card2 = deck[randomNum2];\n      cardName2 = this.formatName(card2.name);\n      cardSummary2 = card2.summary;\n      console.log(\"card2:\", card2.name);\n      image2 = card2.image;\n      //Card 3\n      card3 = deck[randomNum3];\n      cardName3 = this.formatName(card3.name);\n      cardSummary3 = card3.summary;\n      console.log(\"card3:\", card3.name);\n      image3 = card3.image;\n      //Card 4\n      card4 = deck[randomNum4];\n      cardName4 = this.formatName(card4.name);\n      cardSummary4 = card4.summary;\n      console.log(\"card4:\", card4.name);\n      image4 = card4.image;\n    }\n\n    if (card1 !== null) {\n      return (\n        <div>\n          <button id=\"refresh\" onClick={this.refresh}>\n            <h3 className=\"refresh-title\">Draw</h3>\n            <h3 className=\"refresh-title\">Another</h3>\n          </button>\n          <h1 className=\"you-drew\">You Drew</h1>\n          <button id=\"help-button\" onClick={this.toggle}>\n            ?\n          </button>\n          {showing\n            ? <div>\n              <h2>Over and Under</h2>\n              <p>\n                This four card spread contains one card that represents the\n                overarching theme regarding the question or issue, followed by\n                three underlying factors.\n              </p>\n              <p>\n                Think about what is the main theme of your drawing and what are\n                the smaller things that play into that.\n              </p>\n            </div>\n            : null}\n          <div id=\"overarching-card\">\n            <img id=\"card-image-arching\" alt=\"Card\" src={image4} />\n            <h2 id=\"overarching-title\">{cardName4}</h2>\n          </div>\n          <div className=\"cards-displayed\">\n            <img id=\"card-image-first\" alt=\"Card\" src={image1} />\n            <img id=\"card-image-second\" alt=\"Card\" src={image2} />\n            <img id=\"card-image-third\" alt=\"Card\" src={image3} />\n            <h4>\n              {cardName1}, {cardName2}, {cardName3}\n            </h4>\n          </div>\n          <div className=\"threecard-summary\">\n            {/* Card 4 */}\n            <h2 className=\"name-title\">OverArching Card:</h2>\n            <h2 className=\"overarching-title\">{cardName4}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image4} />\n            <h4 className=\"summary\">{cardSummary4}</h4>\n            {/* Card 1 */}\n            <h2 className=\"name-title\">Underlying Factors:</h2>\n            <h2 className=\"underlying-title\">{cardName1}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image1} />\n            <h4 className=\"summary\">{cardSummary1}</h4>\n\n            {/* Card 2 */}\n            <h2 className=\"name-title\">{cardName2}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image2} />\n            <h4 className=\"summary\">{cardSummary2}</h4>\n\n            {/* Card 3 */}\n            <h2 className=\"name-title\">{cardName3}</h2>\n            <img className=\"threecard-image\" alt=\"Card\" src={image3} />\n            <h4 className=\"summary\">{cardSummary3}</h4>\n          </div>\n        </div>\n      );\n    } else {\n      return <h1>Card Data Missing :(</h1>;\n    }\n  }\n}\n\nexport default FourCard;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav className=\"main-nav\">\n        <ul>\n          <li className=\"nav-li\">\n            <NavLink to=\"/one\">One</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/three\">Three</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/four\">Four</NavLink>\n          </li>\n          {/* <li className=\"nav-li\">\n            <NavLink to=\"/celtic\">Celtic Cross</NavLink>\n          </li> */}\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n// Components\nimport HomePage from \"./components/HomePage\";\nimport OneCard from \"./components/OneCard\";\nimport ThreeCard from \"./components/ThreeCard\";\nimport FourCard from \"./components/FourCard\";\nimport Nav from \"./components/Nav\";\n\nimport axios from \"axios\";\nimport logo from \"./galaxy.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: null,\n    };\n  }\n\n  componentDidMount() {\n    if (this.state.deck === null) {\n      this.fetchCards();\n    } else {\n      return console.log(\"deck loaded\");\n    }\n  }\n\n  fetchCards = () => {\n    axios\n      .get(\n        \"https://cors-anywhere.herokuapp.com/https://tarot.howlcode.com/api/v1/cards\"\n      )\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          deck: res.data,\n        });\n      })\n      .catch((error) => {\n        console.log(\"Error fetching the cards:\", error);\n      });\n  };\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>\n              Draw Your <span className=\"secondary\">Hand</span>\n            </h1>\n            <h1>How Many Cards?</h1>\n            <Nav />\n          </header>\n          <Switch>\n            <Route\n              exact\n              path=\"/four\"\n              render={(props) => <FourCard {...props} data={this.state.deck} />}\n            />\n            <Route\n              exact\n              path=\"/three\"\n              render={(props) => (\n                <ThreeCard {...props} data={this.state.deck} />\n              )}\n            />\n            <Route\n              exact\n              path=\"/one\"\n              render={(props) => <OneCard {...props} data={this.state.deck} />}\n            />\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}