{"version":3,"sources":["galaxy.svg","components/HomePage.js","components/OneCard.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","Component","OneCard","card","cardName","cardSummary","image","deck","this","props","data","randomNum","Math","floor","random","name","summary","console","log","className","alt","src","Nav","to","App","fetchCards","axios","get","then","res","setState","catch","error","state","logo","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,oC,8MCQ5BC,E,uKAJX,OAAO,iD,GAFYC,aCsCRC,E,uKA7BX,IAEIC,EACAC,EACAC,EACAC,EALAC,EAAOC,KAAKC,MAAMC,KAClBC,EAAYC,KAAKC,MAAsB,GAAhBD,KAAKE,UAahC,OARIP,GAAQA,EAAK,KAEfH,GADAD,EAAOI,EAAKI,IACII,KAChBV,EAAcF,EAAKa,QACnBC,QAAQC,IAAI,QAASf,EAAKY,MAC1BT,EAAQH,EAAKG,OAGF,OAATH,EAEA,6BACE,wCACA,wBAAIgB,UAAU,cAAcf,GAC5B,wBAAIe,UAAU,WAAWd,GACzB,yBAAKc,UAAU,aAAaC,IAAI,OAAOC,IAAKf,KAIzC,wD,GAjCSL,aCwBPqB,E,uKArBX,OACE,yBAAKH,UAAU,YACb,4BACE,wBAAIA,UAAU,UACZ,kBAAC,IAAD,CAASI,GAAG,QAAZ,QAEF,wBAAIJ,UAAU,UACZ,kBAAC,IAAD,CAASI,GAAG,UAAZ,UAEF,wBAAIJ,UAAU,UACZ,kBAAC,IAAD,CAASI,GAAG,SAAZ,SAEF,wBAAIJ,UAAU,UACZ,kBAAC,IAAD,CAASI,GAAG,WAAZ,uB,GAfMtB,a,kCC+DHuB,G,wDArDb,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IAURgB,WAAa,WACXC,IACGC,IACC,+EAEDC,MAAK,SAACC,GACLZ,QAAQC,IAAIW,GACZ,EAAKC,SAAS,CACZvB,KAAMsB,EAAInB,UAGbqB,OAAM,SAACC,GACNf,QAAQC,IAAI,4BAA6Bc,OArB7C,EAAKC,MAAQ,CACX1B,KAAM,MAHS,E,gEAQjBC,KAAKiB,e,+BAkBG,IAAD,OACP,OACE,kBAAC,IAAD,KACE,yBAAKN,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKE,IAAKa,IAAMf,UAAU,WAAWC,IAAI,SACzC,yCACY,0BAAMD,UAAU,aAAhB,SAEZ,kBAAC,EAAD,OAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEgB,OAAK,EACLC,KAAK,OACLC,OAAQ,SAAC5B,GAAD,OAAW,kBAAC,EAAD,iBAAaA,EAAb,CAAoBC,KAAM,EAAKuB,MAAM1B,WAE1D,kBAAC,IAAD,CAAO6B,KAAK,KACV,kBAAC,EAAD,c,GA7CInC,cCAEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OACP,kBAAC,IAAMO,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMoB,c","file":"static/js/main.ca28d122.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/galaxy.5346ee6a.svg\";","import React, { Component } from \"react\";\n\nclass HomePage extends Component {\n  render() {\n    return <h1>What Awaits? </h1>;\n  }\n}\n\nexport default HomePage;\n","import React, { Component } from \"react\";\n\nclass OneCard extends Component {\n  // constructor(props) {\n  //   super(props);\n  //   this.state = {\n  //     loading: true,\n  //   };\n  // }\n\n  render() {\n    let deck = this.props.data;\n    let randomNum = Math.floor(Math.random() * 78);\n    let card;\n    let cardName;\n    let cardSummary;\n    let image;\n    if (deck && deck[0]) {\n      card = deck[randomNum];\n      cardName = card.name;\n      cardSummary = card.summary;\n      console.log(\"card:\", card.name);\n      image = card.image;\n    }\n\n    if (card !== null) {\n      return (\n        <div>\n          <h1>You Drew</h1>\n          <h2 className=\"name-title\">{cardName}</h2>\n          <h4 className=\"summary\">{cardSummary}</h4>\n          <img className=\"card-image\" alt=\"Card\" src={image} />\n        </div>\n      );\n    } else {\n      return <h1>Card Data Missing :(</h1>;\n    }\n  }\n}\n\nexport default OneCard;\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nclass Nav extends Component {\n  render() {\n    return (\n      <nav className=\"main-nav\">\n        <ul>\n          <li className=\"nav-li\">\n            <NavLink to=\"/one\">One</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/three\">Three</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/four\">Four</NavLink>\n          </li>\n          <li className=\"nav-li\">\n            <NavLink to=\"/celtic\">Celtic Cross</NavLink>\n          </li>\n        </ul>\n      </nav>\n    );\n  }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\n// Components\nimport HomePage from \"./components/HomePage\";\nimport OneCard from \"./components/OneCard\";\nimport Nav from \"./components/Nav\";\n\nimport axios from \"axios\";\nimport logo from \"./galaxy.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      deck: null,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchCards();\n  }\n\n  fetchCards = () => {\n    axios\n      .get(\n        \"https://cors-anywhere.herokuapp.com/https://tarot.howlcode.com/api/v1/cards\"\n      )\n      .then((res) => {\n        console.log(res);\n        this.setState({\n          deck: res.data,\n        });\n      })\n      .catch((error) => {\n        console.log(\"Error fetching the cards:\", error);\n      });\n  };\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>\n              Draw Your <span className=\"secondary\">Hand</span>\n            </h1>\n            <Nav />\n          </header>\n          <Switch>\n            <Route\n              exact\n              path=\"/one\"\n              render={(props) => <OneCard {...props} data={this.state.deck} />}\n            />\n            <Route path=\"/\">\n              <HomePage />\n            </Route>\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}